archetype permits(owner : address) with metadata ""

/* ERRORS ------------------------------------------------------------------ */

constant EXPIRY_TOO_BIG        : string = "EXPIRY_TOO_BIG"
constant USER_PERMIT_NOT_FOUND : string = "USER_PERMIT_NOT_FOUND"
constant PERMIT_NOT_FOUND      : string = "PERMIT_NOT_FOUND"
constant MISSIGNED             : string = "MISSIGNED"
constant PERMIT_EXPIRED        : string = "PERMIT_EXPIRED"

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/* PAUSABLE ---------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

/* STORAGE ----------------------------------------------------------------- */

asset consumer {
  cid : address
}

record user_permit {
  expiry : option<nat>;
  created_at : date;
}

asset permits to big_map {
  user_address : address;
  counter      : nat = 0;
  user_expiry  : option<nat> = none;
  user_permits : map<bytes, user_permit> = [];
}

variable default_expiry : nat = 31556952

/* FUNCTIONS --------------------------------------------------------------- */

function get_default_expiry(addr : address) : nat {
  return (permits[addr] ? (the.user_expiry ? the : default_expiry) : default_expiry)
}

function get_expiry(addr : address, permit_key : bytes) : nat {
  return (permits[addr] ? let d = (the.user_expiry ? the : default_expiry) in
    (the.user_permits[permit_key] ? (the.expiry ? the : default_expiry) : d) : default_expiry
  )
}

function has_expired(up : user_permit, e : nat) : bool {
  return (up.created_at + (up.expiry ? the : e) * 1s < now)
}

/* ENTRYPOINTS ------------------------------------------------------------- */

enum consumer_op =
| add<address>
| remove<address>

entry manage_consumer(op : consumer_op) {
  called by owner
  effect {
    match op with
    | add(a)    -> consumer.add({ a })
    | remove(a) -> consumer.remove(a)
    end
  }
}

entry set_expiry(iv : option<nat>, ip : option<bytes>) {
  require {
    r1: is_not_paused();
    r2: iv ? the < default_expiry : true otherwise EXPIRY_TOO_BIG;
  }
  effect {
    const caller_permit ?= permits[caller] : (USER_PERMIT_NOT_FOUND, caller);
    match ip with
    | some(p) -> begin
        if (iv ? the > 0 : true) then begin
          const up : user_permit ?=
            caller_permit.user_permits[p] : (PERMIT_NOT_FOUND, (caller, p));
          permits[caller].user_permits.update(p, some({ up with expiry = iv }))
        end else begin
          permits[caller].user_permits.remove(p)
        end
      end
    | none    -> permits.update(caller, { user_expiry = iv })
    end
  }
}

entry set_default_expiry(v : nat) {
  called by owner
  require { r3: is_not_paused() }
  effect {
    default_expiry := v
  }
}

entry permit(pk : key, sig : signature, data : bytes) {
  constant {
    user          is key_to_address(pk);
    usr_permit    is permits[user] ?
                      (the.counter, the.user_permits) :
                      (0, make_map<bytes, user_permit>([]));
    pcounter      is usr_permit[0];
    puser_permits is usr_permit[1];
    to_sign       is pack(((self_address, self_chain_id), (pcounter, data)));
    usr_expiry    is get_default_expiry(user);
  }
  require {
    p4: is_not_paused();
    p5: check_signature(pk, sig, to_sign) otherwise (MISSIGNED, to_sign)
  }
  effect {
    permits.add_update(user, {
      counter += 1;
      user_permits = put(puser_permits, data, {
        expiry = some(usr_expiry);
        created_at = now
      })
    });
    for (k, v) in permits[user].user_permits do
      if has_expired(v, usr_expiry)
      then permits[user].user_permits.remove(k)
    done
  }
}

entry consume(signer : address, data: bytes, err: string) {
  called by consumer
  constant {
   permit_key     is blake2b(data);
   signer_expiry  is get_expiry(signer, permit_key);
   lpermit       ?is permits[signer]                  otherwise USER_PERMIT_NOT_FOUND;
   luser_permits ?is lpermit.user_permits[permit_key] otherwise err;
  }
  require {
    p6: is_not_paused()
  }
  fail if {
    p7 : has_expired(luser_permits, signer_expiry) with PERMIT_EXPIRED
  }
  effect {
    permits[signer].user_permits.remove(permit_key)
  }
}

entry check(signer : key, sig : signature, data : bytes) {
  called by consumer
  constant {
    pkh      is key_to_address(signer);
    lcounter is permits[pkh] ? the.counter : 0;
    to_sign  is pack((self_address, lcounter, blake2b(data)));
  }
  require {
    p8: is_not_paused();
    p9: check_signature(signer, sig, to_sign) otherwise (MISSIGNED, to_sign)
  }
  effect {
    permits.add_update(pkh, { counter = (lcounter + 1)});
  }
}